;; User behaviors
;; -----------------------------
;; Behaviors are stored as a set of diffs that are merged together
;; to create the final set of functionality that makes up Light Table. You can
;; modify these diffs to either add or subtract functionality.
;;
;; Behaviors are added to tags, objects with those tags then automatically gain
;; whatever logic the behavior imparts. To see a list of user-level behaviors,
;; start typing a word related to the functionality you want in between the square
;; brackets (e.g. "theme").

[
 ;; The app tag is kind of like global scope. You assign behaviors that affect
 ;; all of Light Table to it.
 [:app :lt.objs.style/set-skin "dark"]
 [:app :lt.objs.plugins/load-js "user_compiled.js"]

 ;; The editor tag is applied to all editors
 [:editor :lt.objs.editor/no-wrap]
 [:editor :lt.objs.style/set-theme "default"]
 [:editor :lt.objs.style/font-settings "ubuntu mono" 15]

 ;; Here we can add behaviors to just clojure editors
 [:editor.clojure :lt.plugins.clojure/print-length 1000]

 ;; Behaviors specific to a user-defined object
 [:user.hello :lt.plugins.user/on-close-destroy]

 ;; To subtract a behavior, prefix the name with '-' e.g.
 ;;  [:app :-lt.objs.intro/show-intro]

 [:editor.javascript :lt.plugins.jsbeautify/jsbeautify-options
  {
   :indent_size 2
   :indent_level 0
   :preserve_newlines true
   :max_preserve_newlines 10
   }]



 [:editor.javascript :lt.plugins.jshint/on-save]
 [:editor.javascript :lt.plugins.jshint/jshint-options
  {
   :bitwise true,    ; ;// true: Prohibit bitwise operators (&, |, ^, etc.)
   :camelcase true,  ;   // true: Identifiers must be in camelCase
   :curly true,     ;// true: Require {} for every new block or scope
   :eqeqeq true,    ; // true: Require triple equals (===) for comparison
   :forin true,    ; // true: Require filtering for..in loops with obj.hasOwnProperty()
   :immed false,   ; // true: Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`
   :indent 2,      ;  // {int} Number of spaces to use for indentation
   :latedef false, ;   // true: Require variables/functions to be defined before being used
   :newcap false,   ; // true: Require capitalization of all constructor functions e.g. `new F()`
   :noarg true,    ; // true: Prohibit use of `arguments.caller` and `arguments.callee`
   :noempty true,  ;   // true: Prohibit use of empty blocks
   :nonew false,   ; // true: Prohibit use of constructors for side-effects (without assignment)
   :plusplus false,   ; // true: Prohibit use of `++` & `--`
   :quotmark false,  ;  // Quotation mark consistency:
   ;         //   false    : do nothing (default)
   ;          //   true     : ensure whatever is used is consistent
   ;          //   "single" : require single quotes
   ;         //   "double" : require double quotes
   :undef false,     ;// true: Require all non-global variables to be declared (prevents global leaks)
   :unused true,     ;// true: Require all defined variables be used
   :strict false,    ; // true: Requires all functions run in ES5 Strict Mode
   :trailing true,    ; // true: Prohibit trailing whitespaces
   :maxparams false,   ; // {int} Max number of formal params allowed per function
   :maxdepth false,    ;// {int} Max depth of nested blocks (within functions)
   :maxstatements false,   ; // {int} Max number statements per function
   :maxcomplexity false,    ;// {int} Max cyclomatic complexity per function

   ;;     "asi"           : false,     // true: Tolerate Automatic Semicolon Insertion (no semicolons)
   ;;     "boss"          : false,     // true: Tolerate assignments where comparisons would be expected
   ;;     "debug"         : false,     // true: Allow debugger statements e.g. browser breakpoints.
   ;;     "eqnull"        : false,     // true: Tolerate use of `== null`
   ;;     "es5"           : false,     // true: Allow ES5 syntax (ex: getters and setters)
   :esnext true,    ; // true: Allow ES.next (ES6) syntax (ex: `const`)
   ;;     "moz"           : false,     // true: Allow Mozilla specific syntax (extends and overrides esnext features)
   ;;                                  // (ex: `for each`, multiple try/catch, function expressionâ€¦)
   ;;     "evil"          : false,     // true: Tolerate use of `eval` and `new Function()`
   ;;     "expr"          : false,     // true: Tolerate `ExpressionStatement` as Programs
   ;;     "funcscope"     : false,     // true: Tolerate defining variables inside control statements"
   ;;     "globalstrict"  : true,      // true: Allow global "use strict" (also enables 'strict')
   ;;     "iterator"      : false,     // true: Tolerate using the `__iterator__` property
   ;;     "lastsemic"     : false,     // true: Tolerate omitting a semicolon for the last statement of a 1-line block
   ;;     "laxbreak"      : false,     // true: Tolerate possibly unsafe line breakings
   ;;     "laxcomma"      : false,     // true: Tolerate comma-first style coding
   ;;     "loopfunc"      : false,     // true: Tolerate functions being defined in loops
   ;;     "multistr"      : false,     // true: Tolerate multi-line strings
   ;;     "proto"         : false,     // true: Tolerate using the `__proto__` property
   ;;     "scripturl"     : false,     // true: Tolerate script-targeted URLs
   ;;     "smarttabs"     : false,     // true: Tolerate mixed tabs/spaces when used for alignment
   :shadow false,     ;;// true: Allows re-define variables later in code e.g. `var x=1; x=2;`
   :sub false,     ;// true: Tolerate using `[]` notation when it can still be expressed in dot notation
   :supernew false,     ;// true: Tolerate `new function () { ... };` and `new Object;`
   ;;     "validthis"     : false,     // true: Tolerate using this in a non-constructor function

   ;;     // Environments
   :browser true, ;;    // Web Browser (window, document, etc)
   ;;     "couch"         : false,    // CouchDB
   ;;     "devel"         : true,     // Development/debugging (alert, confirm, etc)
   ;;     "dojo"          : false,    // Dojo Toolkit
   ;;     "jquery"        : false,    // jQuery
   ;;     "mootools"      : false,    // MooTools
   :node true,  ;;  // Node.js
   ;;     "nonstandard"   : false,    // Widely adopted globals (escape, unescape, etc)
   ;;     "prototypejs"   : false,    // Prototype and Scriptaculous
   ;;     "rhino"         : false,    // Rhino
   ;;     "worker"        : false,    // Web Workers
   ;;     "wsh"           : false,    // Windows Scripting Host
   ;;     "yui"           : false,    // Yahoo User Interface
   ;;:meteor true,   ;; // Meteor.js

   ;;     // Legacy
   ;;     "nomen"         : false,    // true: Prohibit dangling `_` in variables
   ;;     "onevar"        : false,    // true: Allow only one `var` statement per function
   ;;     "passfail"      : false,    // true: Stop on first error
   ;;     "white"         : false,    // true: Check against strict whitespace and indentation rules

   ;;     // Custom globals, from http://docs.meteor.com, in the order they appear there
   :globals {
             :Meteor false,
             ;;       "DDP": false,
             :Mongo false, ;;//Meteor.Collection renamed to Mongo.Collection
             ;;       "Session": false,
             ;;       "Accounts": false,
             ;;       "Template": false,
             ;;       "Blaze": false,  //UI is being renamed Blaze
             ;;       "UI": false,
             ;;       "Match": false,
             ;;       "check": false,
             ;;       "Tracker": false, //Deps renamed to Tracker
             ;;       "Deps": false,
             ;;       "ReactiveVar": false,
             ;;       "EJSON": false,
             ;;       "HTTP": false,
             ;;       "Email": false,
             ;;       "Assets": false,
             ;;       "Handlebars": false,      // https://github.com/meteor/meteor/wiki/Handlebars
             ;;       "Package": false,
             ;;       "App": false, //mobile-config.js

             ;;       // Meteor internals
             ;;       "DDPServer": false,
             ;;       "global": false,
             ;;       "Log": false,
             ;;       "MongoInternals": false,
             ;;       "process": false,
             ;;       "WebApp": false,
             ;;       "WebAppInternals": false,

             ;;       // globals useful when creating Meteor packages
             :Npm false,
             ;;       "Tinytest": false,

             ;;       // common Meteor packages
             ;;       "Random": false,
             _ false,               ;;// Underscore.js
             ;;       "$": false,               // jQuery
             ;;       "Router": false           // iron-router
             }
   }]
 ]

